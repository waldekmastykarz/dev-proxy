name: Release
on:
  push:
    tags: ['v*']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  publish_binaries:
    name: Publish binaries
    runs-on: [windows-latest]
    strategy:
      matrix:
        architecture:
          - win-x64
          - win-x86
          - linux-x64
          - linux-arm64
          - osx-x64
    env:
      release: 'dev-proxy-${{ matrix.architecture }}-${{ github.ref_name }}'
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Setup .NET
        uses: actions/setup-dotnet@3951f0dfe7a07e2313ec93c75700083e2005cbab # v4.3.0
        with:
          dotnet-version: 9.0.x
      - name: Rename executable for beta
        if: contains(github.ref_name, '-beta')
        run: |
          pushd
          cd ./dev-proxy
          $content = Get-Content dev-proxy.csproj
          $content -replace '<AssemblyName>devproxy</AssemblyName>', '<AssemblyName>devproxy-beta</AssemblyName>' | Set-Content dev-proxy.csproj
          popd
      - name: Set newVersionNotification for beta
        if: contains(github.ref_name, '-beta')
        run: |
          pushd
          cd ./dev-proxy
          $content = Get-Content devproxyrc.json
          $content -replace '"newVersionNotification": "stable"', '"newVersionNotification": "beta"' | Set-Content devproxyrc.json
          popd
      - name: Publish ${{ matrix.architecture }}
        run: dotnet publish ./dev-proxy/dev-proxy.csproj -c Release -p:PublishSingleFile=true -p:InformationalVersion=$("${{ github.ref_name }}".Substring(1)) -r ${{ matrix.architecture }} --self-contained -o ./${{ env.release }}
      - name: Build plugins
        run: dotnet build ./dev-proxy-plugins/dev-proxy-plugins.csproj -p:InformationalVersion=$("${{ github.ref_name }}".Substring(1)) -c Release -r ${{ matrix.architecture }} --no-self-contained
      - name: Build abstractions
        if: matrix.architecture == 'win-x64'
        run: dotnet build ./dev-proxy-abstractions/dev-proxy-abstractions.csproj -p:InformationalVersion=$("${{ github.ref_name }}".Substring(1)) -c Release --no-self-contained
      - name: Add plugins to output
        run: cp ./dev-proxy/bin/Release/net9.0/${{ matrix.architecture }}/plugins ./${{ env.release }} -r
      - name: Remove unnecessary files
        run: |
          pushd
          cd ./${{ env.release }}
          Get-ChildItem -Filter *.pdb -Recurse | Remove-Item
          Get-ChildItem -Filter *.deps.json -Recurse | Remove-Item
          Get-ChildItem -Filter *.runtimeconfig.json -Recurse | Remove-Item
          popd
      - name: Archive release ${{ env.release }}
        uses: thedoctor0/zip-release@a24011d8d445e4da5935a7e73c1f98e22a439464 # master
        with:
          filename: '../${{ env.release }}.zip'
          directory: './${{ env.release }}'
      - name: Release SHA256 hash
        run: |
          $(Get-FileHash ./${{ env.release }}.zip -Algorithm SHA256).Hash
      - name: Upload release
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: binaries-${{ env.release }}
          path: ./${{ env.release }}.zip
      - name: Archive abstractions
        if: matrix.architecture == 'win-x64'
        uses: thedoctor0/zip-release@a24011d8d445e4da5935a7e73c1f98e22a439464 # master
        with:
          filename: '../../../../dev-proxy-abstractions-${{ github.ref_name }}.zip'
          directory: './dev-proxy-abstractions/bin/Release/net9.0'
          exclusions: '*.json'
      - name: Upload abstractions
        if: matrix.architecture == 'win-x64'
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: binaries-dev-proxy-abstractions-${{ github.ref_name }}
          path: ./dev-proxy-abstractions-${{ github.ref_name }}.zip
      - name: Add installer icon
        if: contains(matrix.architecture, 'win-')
        run: |
          if ('${{ github.ref_name }}'.Contains('beta')) {
            cp ./media/icon-beta.ico ./${{ env.release }}
          } else {
            cp ./media/icon.ico ./${{ env.release }}
          }
      - name: Update version in beta installer
        if: contains(matrix.architecture, 'win-') && contains(github.ref_name, '-beta')
        run: |
          $content = Get-Content ./install-beta.iss
          $content -replace '#define MyAppVersion .*', "#define MyAppVersion `"$("${{ github.ref_name }}".Substring(1))`"" | Set-Content ./install-beta.iss
      - name: Set installer file name
        id: installer
        if: contains(matrix.architecture, 'win-')
        run: |
          if ('${{ github.ref_name }}'.Contains('beta')) {
              Write-Output "filename=install-beta.iss" >> $env:GITHUB_OUTPUT
          } else {
              Write-Output "filename=install.iss" >> $env:GITHUB_OUTPUT
          }
      - name: Add install file
        if: contains(matrix.architecture, 'win-')
        run: cp ./${{ steps.installer.outputs.filename }} ./${{ env.release }}
      - name: Build Installer
        if: contains(matrix.architecture, 'win-')
        run: ISCC.exe ${{ steps.installer.outputs.filename }} /F"dev-proxy-installer-${{ matrix.architecture }}-${{ github.ref_name }}"
        working-directory: ./${{ env.release }}
      - name: Upload Installer
        if: contains(matrix.architecture, 'win-')
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: installer-dev-proxy-${{ github.ref_name }}-${{ matrix.architecture }}
          path: ./${{ env.release }}/dev-proxy-installer-${{ matrix.architecture }}-${{ github.ref_name }}.exe
      - name: Installer SHA256 hash
        if: contains(matrix.architecture, 'win-')
        run: |
          $(Get-FileHash ./${{ env.release }}/dev-proxy-installer-${{ matrix.architecture }}-${{ github.ref_name }}.exe -Algorithm SHA256).Hash
  # create_release:
  #   name: Create Release
  #   needs: [publish_binaries]
  #   environment:
  #     name: gh_releases
  #   runs-on: [windows-latest]
  #   permissions:
  #     contents: write
  #   steps:
  #     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
  #     - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
  #       with:
  #         path: output
  #     - name: Release
  #       uses: anton-yurchenko/git-release@ec9c5b5c36b27eaffc628785b9183eae54601200 # v6.0.0
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         DRAFT_RELEASE: "false"
  #         PRE_RELEASE: "false"
  #         CHANGELOG_FILE: "CHANGELOG.md"
  #         ALLOW_EMPTY_CHANGELOG: "true"
  #       with:
  #         args: |
  #             output/binaries-*/*.zip
  #             output/installer-*/*.exe
  deploy_docker:
    name: Publish Docker image
    runs-on: ubuntu-latest
    needs: [create_release]
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Set version
        run: echo "DEVPROXY_VERSION=${GITHUB_REF_NAME:1}" >> $GITHUB_ENV
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        if: "!contains(github.ref_name, '-beta')"
        id: push
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            DEVPROXY_VERSION=${{ env.DEVPROXY_VERSION }}
      - name: Build and push beta Docker image
        if: contains(github.ref_name, '-beta')
        id: push_beta
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          context: .
          file: ./Dockerfile_beta
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            DEVPROXY_VERSION=${{ env.DEVPROXY_VERSION }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
